.TH ceeteef 1 "24 July 2019" "version 0.8.2"

.SH NAME
ceeteef - Run C/C++ unit tests

.SH SYNOPSIS
\fBceeteef\fR [\fB-h\fR] [\fB-l\fR] [\fB-n\fR \fIpat\fR] [\fB-p\fR \fInum\fR]
[\fB-t\fR \fIsec\fR] [\fB-v\fR] [--] \fIfile\fR...

.SH DESCRIPTION
\fBceeteef\fR runs C/C++ unit tests. It reads test symbols created during
compilation by the API. See \fBctf\fR(3) for more. The source of these symbols
is \fIfile\fR, of which there may be multiple. Tests from multiple files will
not be run in parallel.

Test output begins with "-- \fItest_name\fR --". Lines of the output are in the
format "\fItest_name\fR:Line of text". The last exit info line takes two forms.
If the test succeeded, the output is "\fItest_name\fR SUCCEEDED". On failure,
the output is "\fItest_name\fR FAILED   \fIfailure_info\fR". There are several
possible formats of \fIfailure_info\fR:
.IP "Exited with status \fIexit_status\fR"
The test returned or exited with the non-zero value \fIexit_status\fR.
.IP "Terminated by signal \fIsig_num\fR   [Core dumped]"
The signal identified by \fIsig_num\fR terminated the test. If the core was
dumped, "Core dumped" is tacked onto the end.
.IP "Timed out in \fIrun_time\fRs"
The test exceeded the maximum run time of \fIrun_time\fR seconds.

.SH OPTIONS

.IP \fB-h\fR
Print this help information and exit.

.IP \fB-l\fR
Just list test names; run no tests.

.IP "\fB-n\fR \fIpat\fR"
Match test names with the regular expression \fIpat\fR, running only ones that
match. If none is set, all tests run.

.IP "\fB-p\fR \fInum\fR"
Set the number of test-running processes to \fInum\fR. If unset, it equals the
number of tests. This is capped at some number that depends on system resources.

.IP \fB-s\fR
Force output styles (color, etc.) on. If you define NO_COLOR in the environment
and use not -s nor -S, no styles are output. By default, styles are output only
if stdout is not piped.

.IP \fB-S\fR
Force output styles off.

.IP "\fB-t\fR \fIsec\fR"
Set the maximum test runtime to \fIsec\fR seconds. \fIsec\fR is a positive
integer. After this time, a test fails.

.IP \fB-v\fR
Print version information and exit.

.SH EXAMPLE

This example will demonstrate how to write and execute a test. First, write it:

file "test.c":

.PD 0
.P
#include <libctf.h>
.P
#include <assert.h>
.P
#include <stdio.h>
.P

.P
CTF_TEST(hello_world,
.P
  printf("Hello, world!\\n");
.P
  fprintf(stderr, "Hello again, world!\\n");
.P
  assert(1 + 1 == 3);
.P
)
.PD

Now compile and run it:

.PD 0
.P
 $ cc -DCTF_TESTS_ENABLED -shared test.c # -shared exposes the symbols
.P
 $ ceeteef a.out
.P
-- hello_world --
.P
hello_world:Hello, world!
.P
hello_world:Hello again, world!
.P
hello_world:Assertion failed: (1 + 1 == 3), function hello_world, file test.c,
line 8.
.P
hello_world FAILED   Terminated by signal 6   Core dumped
.PD

.SH EXIT STATUS

\fBceeteef\fR exits with 0 on success or a non-zero value on failure.

.SH SEE ALSO

\fBctf\fR(3)

.SH AUTHOR
Written by Jude Melton-Houghton (jwmhjwmh@gmail.com).
