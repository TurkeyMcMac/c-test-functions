.TH ceeteef 1 "24 July 2019" "version 0.0.6"

.SH NAME
ceeteef - Run C/C++ unit tests

.SH SYNOPSIS
\fBceeteef\fR [\fB-h\fR] [\fB-l\fR] [\fB-n\fR \fIpat\fR]... [\fB-p\fR \fInum\fR]
[\fB-v\fR] [--] \fIfile\fR

.SH DESCRIPTION
\fBceeteef\fR runs C/C++ unit tests. It reads test symbols created during
compilation by the API. See the \fBAPI\fR section for more. The source of these
symbols is \fIfile\fR, which is a required argument unless \fB-h\fR or \fB-v\fR
is given. When compiling the executable, make sure symbols are exported by
default. This probably won't be a problem in most cases. However, link-time
optimization will remove the test functions. The library tries to mitigate this,
but the air-tight solution is to not use LTO when testing. C++ name mangling is
handled automatically.

For more detail, see the \fBAPI\fR and \fBEXAMPLE\fR sections.

.SH OPTIONS

.IP \fB-h\fR
Print this help information and exit.

.IP \fB-l\fR
Just list test names; run no tests.

.IP "\fB-n\fR \fIpat\fR"
Add the Basic Regular Expression \fIpat\fR to the matching list. Only tests
which match one of these patterns are run. If there are no patterns, all tests
are run.

.IP "\fB-p\fR \fInum\fR"
Set the number of test-running processes to \fInum\fR. If unset, it equals the
number of tests.

.IP \fB-v\fR
Print version information and exit.

.SH API

To use the library, include \fBlibctf.h\fR either locally (by copying the header
from somewhere) or from your include path. The header also contains more usage
information.

Create your tests with \fBCTF_TEST\fR(\fIfunction_name\fR, \fIbody\fR). Compile
your program with \fBCTF_TESTS_ENABLED\fR defined. \fIfunction_name\fR is just
that, a function name. \fIbody\fR is a function body. The brackets around the
body are unnecessary. If the function does not crash nor return non-zero, the
test has succeeded. Otherwise, it fails. If there is no return statement at the
end of the function, the test succeeds when it reaches the end.

As mentioned above, to preserve the test symbols, it is best to use little
optimization, and especially not link-time optimization.

See the \fBEXAMPLE\fR section below.

.SH EXAMPLE

This example will demonstrate how to write and execute a test. First, write it:

file "test.c":

.PD 0
.P
#include <libctf.h>
.P
#include <assert.h>
.P
#include <stdio.h>
.P

.P
CTF_TEST(hello_world,
.P
  printf("Hello, world!\\n");
.P
  fprintf(stderr, "Hello again, world!\\n");
.P
  assert(1 + 1 == 3);
.P
)
.PD

Now compile and run it:

.PD 0
.P
 $ cc -DCTF_TESTS_ENABLED test.c
.P
 $ ceeteef a.out
.P
-- hello_world --
.P
hello_world:Hello, world!
.P
hello_world:Hello again, world!
.P
hello_world:Assertion failed: (1 + 1 == 3), function hello_world, file test.c,
line 8.
.P
hello_world FAILED   Terminated by signal 6   Core dumped
.PD

As you can see, both stderr and stdout are captured. The test crashed due to an
assertion failure, making it fail.

.SH EXIT STATUS

\fBceeteef\fR exits with 0 on success or a non-zero value on failure.

.SH AUTHOR
Written by Jude Melton-Houghton (jwmhjwmh@gmail.com).
