.TH ceeteef 1 "24 July 2019" "version 0.3.8"

.SH NAME
ceeteef - Run C/C++ unit tests

.SH SYNOPSIS
\fBceeteef\fR [\fB-h\fR] [\fB-l\fR] [\fB-n\fR \fIpat\fR] [\fB-p\fR \fInum\fR]
[\fB-t\fR \fIsec\fR] [\fB-v\fR] [--] \fIfile\fR...

.SH DESCRIPTION
\fBceeteef\fR runs C/C++ unit tests. It reads test symbols created during
compilation by the API. See \fBctf\fR(3) for more. The source of these symbols
is \fIfile\fR, of which there may be multiple.

.SH OPTIONS

.IP \fB-h\fR
Print this help information and exit.

.IP \fB-l\fR
Just list test names; run no tests.

.IP "\fB-n\fR \fIpat\fR"
Match test names with the regular expression \fIpat\fR, running only ones that
match. If none is set, all tests run.

.IP "\fB-p\fR \fInum\fR"
Set the number of test-running processes to \fInum\fR. If unset, it equals the
number of tests.

.IP "\fB-t\fR \fIsec\fR"
Set the maximum test runtime to \fIsec\fR seconds. \fIsec\fR is a positive
integer. After this time, a test fails.

.IP \fB-v\fR
Print version information and exit.

.SH EXAMPLE

This example will demonstrate how to write and execute a test. First, write it:

file "test.c":

.PD 0
.P
#include <libctf.h>
.P
#include <assert.h>
.P
#include <stdio.h>
.P

.P
CTF_TEST(hello_world,
.P
  printf("Hello, world!\\n");
.P
  fprintf(stderr, "Hello again, world!\\n");
.P
  assert(1 + 1 == 3);
.P
)
.PD

Now compile and run it:

.PD 0
.P
 $ cc -DCTF_TESTS_ENABLED test.c
.P
 $ ceeteef a.out
.P
-- hello_world --
.P
hello_world:Hello, world!
.P
hello_world:Hello again, world!
.P
hello_world:Assertion failed: (1 + 1 == 3), function hello_world, file test.c,
line 8.
.P
hello_world FAILED   Terminated by signal 6   Core dumped
.PD

.SH EXIT STATUS

\fBceeteef\fR exits with 0 on success or a non-zero value on failure.

.SH SEE ALSO

\fBctf\fR(3)

.SH AUTHOR
Written by Jude Melton-Houghton (jwmhjwmh@gmail.com).
