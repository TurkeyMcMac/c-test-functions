.TH ctf 3 "27 July 2019"

.SH NAME
\fBCTF_TEST\fR - Create a CTF test function

.SH SYNOPSIS

\fB#include <libctf.h>\fR /* Also includes \fBCTF_TEST_FUN\fR. */

\fBCTF_TEST\fR(\fIname\fR, \fIbody\fR)

\fB#include <libc89tf.h>\fR

\fBCTF_TEST_FUN\fR(\fIname\fR) { \fIbody\fR }

.SH DESCRIPTION
This is the API that goes with the \fBceeteef\fR(1) utility. Here is described
how to create tests which \fBceeteef\fR(1) can run from the compiled binary.

This API is meant primarily for C. \fBCTF_TEST_FUN\fR is ANSI C compatible,
while \fBCTF_TEST\fR requires C99 or above. The API also works with C++,
although it does not respect namespaces. \fBCTF_TEST_FUN\fR will probably work
with any C++ version, while \fBCTF_TEST\fR requires C++11 or above.

Create your tests with \fBCTF_TEST\fR or \fBCTF_TEST_FUN\fR. Compile your
program with \fBCTF_TESTS_ENABLED\fR defined to preserve the tests. \fIname\fR
is a function name. \fIbody\fR is a function body. The brackets around the body
are not necessary with \fBCTF_TEST\fR.

\fBCTF_TEST\fR and \fBCTF_TEST_FUN\fR are very similar. However, \fBCTF_TEST\fR
expands to nothing if tests are disabled, while \fBCTF_TEST_FUN\fR still creates
a function. \fBCTF_TEST\fR also puts an implicit 'return 0' at the end of the
function rather than requiring you to put one there.

If the function neither crashes nor returns non-zero, the test has succeeded.
Otherwise, it fails.

Output from a test to \fIstderr\fR and \fIstdout\fR will be displayed, including
messages about assertion failures and so on.

To preserve the test symbols, you may need to make a shared library with the
\fB-shared\fR option to the compiler. It is best to use little optimization, and
especially not link-time optimization, which removes "unused" symbols. The
library tries to mitigate this, but the best way around it is to not optimize
with your tests.

.SH EXAMPLE

This example will demonstrate how to write and execute a test. First, write it:

file "test.c":

.PD 0
.P
#include <libctf.h>
.P
#include <assert.h>
.P
#include <stdio.h>
.P

.P
CTF_TEST(hello_world,
.P
  printf("Hello, world!\\n");
.P
  fprintf(stderr, "Hello again, world!\\n");
.P
  assert(1 + 1 == 3);
.P
)
.P

.P
CTF_TEST_FUN(say_cheese)
.P
{
.P
  printf("Cheese!\\n");
.P
  return 0;
.P
}
.PD

Now compile and run it:

.PD 0
.P
 $ cc -DCTF_TESTS_ENABLED -shared test.c # -shared exposes the symbols
.P
 $ ceeteef a.out
.P
-- hello_world --
.P
hello_world:Hello, world!
.P
hello_world:Hello again, world!
.P
hello_world:Assertion failed: (1 + 1 == 3), function hello_world, file test.c,
line 8.
.P
hello_world FAILED   Terminated by signal 6   Core dumped
.P
-- say_cheese --
.P
say_cheese:Cheese!
.P
say_cheese SUCCEEDED
.PD

.SH SEE ALSO

\fBceeteef\fR(1)

.SH AUTHOR
Written by Jude Melton-Houghton (jwmhjwmh@gmail.com).
